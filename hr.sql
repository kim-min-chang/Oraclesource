-- EMPLOYEES(SCOTT 계정의 EMP 테이블 원본)
-- EMPLOYEES 전체조회
SELECT * FROM EMPLOYEES e ;
-- EMPLOYEES 의 first_name,last_name ,job_id 조회
SELECT
	FIRST_NAME,
	LAST_NAME,
	JOB_ID
FROM
	EMPLOYEES e ;

-- 사원 번호가 176인 사원의 last_name, 부서번호 조회

SELECT e.LAST_NAME ,e.DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE e.EMPLOYEE_ID = 176;

-- 연봉이 12000 이상 되는 직원들의 last_name 과 연봉 조회
SELECT e.LAST_NAME ,e.SALARY 
FROM EMPLOYEES e
WHERE e.SALARY >= 12000;

-- 연봉이 5000~12000 범위가 아닌 사람들의 last_name 과 연봉 조회
SELECT e.LAST_NAME ,e.SALARY 
FROM EMPLOYEES e
WHERE  e.SALARY > 12000 or e.SALARY < 5000 ;

--20번 혹은 50번 부서에서 근무하는 사원들의 LAST_NAME, 부서번호를 조회
--단 이름의 오름차순, 부서의 오름차순으로 정렬
SELECT  E.LAST_NAME , E.DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE E.DEPARTMENT_ID IN (20,50)
ORDER BY E.LAST_NAME ASC , E.DEPARTMENT_ID ASC;

--커미션을 버는 사원들의 LAST_NAME,SALARY,COMMISSION_PCT 를 조회
--단 연봉의 내림차순,커미션 내림차순으로 정렬
SELECT  E.LAST_NAME , E.SALARY ,E.COMMISSION_PCT 
FROM EMPLOYEES e 
WHERE E.COMMISSION_PCT > 0
ORDER BY E.SALARY DESC , E.COMMISSION_PCT DESC;
--연봉이 2500,3500,7000이 아니며 JOB_ID 가 SA_REP OR ST_CLERK 인 사원 조회
SELECT	*
FROM EMPLOYEES e
WHERE
	E.SALARY NOT IN (2500, 3500, 7000)
	AND E.JOB_ID IN ('SA_REP', 'ST_CLERK');

-- 2018/02/20~2018/05/01 사이에 고용된 직원들의 LAST_NABE,사번(EMPLOYEE_ID), 고용일자(HIRE_DATE) 조회
SELECT  E.LAST_NAME , E.EMPLOYEE_ID ,E.HIRE_DATE 
FROM EMPLOYEES e
WHERE E.HIRE_DATE  >= '2018-02-20'AND E.HIRE_DATE <= '2018-05-01';

-- 2015년에 고용된 사원 조회
SELECT  * 
FROM EMPLOYEES e
WHERE E.HIRE_DATE <= '2015-12-31'AND E.HIRE_DATE >='2015-01-01';

-- 20번 혹은 50번 부서에서 근무하며, 연봉이 5000~12000 사이인 직원들의
--FIRST_NAME, LAST_NAME, 연봉조회(연봉오름차순)
SELECT E.FIRST_NAME, E.LAST_NAME, E.SALARY 
FROM EMPLOYEES e 
WHERE E.DEPARTMENT_ID IN (20,50) AND E.SALARY BETWEEN 5000 AND 12000
ORDER BY E.SALARY ASC;
--연봉이 5000~12000 사이가 아닌 직원들의 정보 조회
SELECT *
FROM EMPLOYEES e 
WHERE E.SALARY NOT BETWEEN 5000 AND 12000;

-- 2018/02/20~2018/05/01 사이에 고용된 직원들의 LAST_NABE,사번(EMPLOYEE_ID), 고용일자(HIRE_DATE) 조회
SELECT  E.LAST_NAME , E.EMPLOYEE_ID ,E.HIRE_DATE 
FROM EMPLOYEES e
WHERE E.HIRE_DATE BETWEEN '2018-02-20'AND '2018-05-01';


-- LIKE
-- LAST_NAME 에 U가 포함되는 사원들의 사번 ,LAST_NAME 조회
SELECT E.EMPLOYEE_ID ,E.LAST_NAME 
FROM EMPLOYEES e
WHERE E.LAST_NAME LIKE '%u%';

-- LAST_NAME 의 4번째 글자가 A 포함되는 사원들의 사번 ,LAST_NAME 조회
SELECT E.EMPLOYEE_ID ,E.LAST_NAME 
FROM EMPLOYEES e
WHERE E.LAST_NAME LIKE '___a%';

-- LAST_NAME 의 A 혹은 E가 포함되는 사원들의 사번 ,LAST_NAME 조회(단 LAST_NAME 오름차순)
SELECT E.EMPLOYEE_ID ,E.LAST_NAME 
FROM EMPLOYEES e
WHERE E.LAST_NAME LIKE '%a%'OR E.LAST_NAME LIKE '%e%'
ORDER BY E.LAST_NAME ASC;

-- LAST_NAME 의 A 와 E가 포함되는 사원들의 사번 ,LAST_NAME 조회(단 LAST_NAME 오름차순)
SELECT E.EMPLOYEE_ID ,E.LAST_NAME 
FROM EMPLOYEES e
WHERE E.LAST_NAME LIKE '%a%' AND E.LAST_NAME LIKE '%e%'
--WHERE E.LAST_NAME LIKE '%a%e%'OR E.LAST_NAME LIKE '%e%a%'
ORDER BY E.LAST_NAME ASC;

-- IS NULL
-- MANAGER_ID 가 없는 사원들의 LAST_NAME 및 JOB_ID
SELECT E.LAST_NAME, E.JOB_ID 
FROM EMPLOYEES e 
WHERE E.MANAGER_ID IS NULL;

--JOB ID가 ST_CLERK가 아닌 사원이 없는 부서 조회
-- 단, 부서가 NULL인 경우는 제외한다.
SELECT DISTINCT E.DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE E.JOB_ID NOT IN('ST_CLERK') AND E.DEPARTMENT_ID IS NOT NULL;

--COMMISSION_PCT 가 NULL 이 아닌 사원들 중에서 COMMISION = SALARY * COMMISION_PCT 를 구한다.
--사원번호 , FRIST_NAME, JOB_ID 와 함께 조회
SELECT E.EMPLOYEE_ID ,E.FIRST_NAME ,E.JOB_ID ,E.SALARY * E.COMMISSION_PCT AS COMMISSION
FROM EMPLOYEES e 
WHERE E.COMMISSION_PCT IS NOT NULL ;

-- 부서 80의 사원에 적용 가능한 세율 표시하기
--LAST_NAME, SALARY, TAX_RATE 출력
--TAX_RATE 는 SALARY / 2000 으로 나눈 후 버림
--			해당 값이 0 이면 0.0/ 1, 0.09/2,0.20/3,0.3/4,0.4/5,0.42/6,0.44/ 그 외 0.45

SELECT
	E.LAST_NAME ,
	E.SALARY ,
	DECODE(TRUNC (SALARY / 2000),
	 0,	0.0,
	 1,	0.09,
	 2,	0.20,
	 3,	0.30,
	 4,	0.40,
	 5,	0.42,
	 6,	0.44,
	 0.45) AS TAX_RATE
FROM
	EMPLOYEES e;

-- 회사내의 최대 연봉 및 최소 연봉의 차이를 출력
SELECT MAX(E.SALARY) ,MIN(E.SALARY), MAX(E.SALARY) - MIN(E.SALARY) AS SAL_GAP
FROM EMPLOYEES e ;
-- 매너저로 근무하는 사원들의 총 숫자를 출력
SELECT COUNT(DISTINCT E.MANAGER_ID) AS 매니저수
FROM EMPLOYEES e;

-- 매니저가 없는 사원들은 제외하고 매니저가 관리하는 사원들 중에서 최소 급여를 받는 사원 조회
-- (매니저가 관리하는 사원 중에서 연봉이6000 미만 제외)
SELECT MANAGER_ID, MIN(SALARY) 
FROM EMPLOYEES e
GROUP BY MANAGER_ID 
HAVING MANAGER_ID IS NOT NULL AND MIN(SALARY) >= 6000
ORDER BY MANAGER_ID ;